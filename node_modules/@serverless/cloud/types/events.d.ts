export declare type EventHandler = {
  id: string
  name: string
  timeout: Number
}
export declare type PublishResult = {
  id: string
  time: number
  delay: number
}
declare class Handler {
  name: string
  callbacks: Array<Function>
  timeout: Number
  constructor(name: string)
  push(handler: Function): void
  setTimeout(ms: Number): void
  invoke(event: any, context: any): Promise<any[]>
}
export declare class Events {
  handlers: Map<string, Handler>
  errors: any[]
  constructor()
  on(name: string, ...args: any[]): Handler | null
  publish(name, ...args: any[]): Promise<PublishResult>
  getConfig(): {
    events: EventHandler[]
    errors: any[]
  }
  getHandlers(): {
    [id: string]: Function
  }
  reset(): void
}
declare const _default: Events
export default _default
